const path = require('path');

const CopyPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
<% if (workbox) { %>const { InjectManifest, GenerateSW } = require('workbox-webpack-plugin');<% } %>

const { merge } = require('webpack-merge');

const base = {
  entry: {
    '<%= appname %>': ['scripts/app.ts'],
  },
  context: path.resolve(__dirname, 'src'),
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'scripts/[name].[hash].js',
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        loader: 'ts-loader',
      },
      {
        test: /\.(css|sass|scss)$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
          },
          {
            loader: 'sass-loader',
          },
        ],
      },
<% if (istanbul) { %>
      {
        test: /\.ts$/,
        exclude: [path.resolve(__dirname, '__tests__')],
        enforce: 'post',
        use: {
          loader: 'istanbul-instrumenter-loader',
          options: { esModules: true },
        },
      },
<% } %>
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: 'public/index.html',
      scriptLoading: 'defer',
    }),
    new MiniCssExtractPlugin({
      filename: 'css/[name].[hash].css',
      chunkFilename: 'css/[id].[hash].css',
    }),
    new CopyPlugin({
      patterns: [{ from: 'public' }],
      options: {
        concurrency: 100,
      },
    }),

<% if (workbox) { %>

    new InjectManifest({
      swSrc: path.join('src', 'sw.js'),
      swDest: 'service-worker.js',
    }),
<% } %>
  ],
  resolve: {
    modules: ['node_modules', path.resolve(__dirname, 'src')],
    extensions: ['.ts', '.js', 'scss'],
  },
  performance: {
    hints: false,
    maxEntrypointSize: 512000,
    maxAssetSize: 512000,
  },
};

const prod = {
  mode: 'production',
  output: {
    publicPath: '/',
  },
};

const dev = {
  mode: 'development',
  output: {
    publicPath: 'http://localhost:8080/',
  },
  devServer: {
    contentBase: './dist',
    clientLogLevel: 'info',
    port: 8080,
    inline: true,
    historyApiFallback: false,
    watchOptions: {
      aggregateTimeout: 300,
      poll: 500,
    },
  },
  devtool: 'inline-source-map',
};

module.exports = (env) => merge(base, env.production ? prod : dev);
